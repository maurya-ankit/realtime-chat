{"version":3,"sources":["../../../src/container.tsx","components/Chat/RoomList.js","../../../src/simple-grid.tsx","../../../src/stack.utils.tsx","../../../src/stack.tsx","components/Chat/index.js","../../../src/text.tsx","../../../src/avatar.tsx","../../../src/use-image.ts"],"names":["Container","forwardRef","omitThemingProps","centerContent","styles","useStyleConfig","ref","className","cx","__css","display","flexDirection","alignItems","RoomList","useState","rooms","setrooms","useEffect","api","get","then","res","data","catch","console","log","length","p","bg","borderRadius","maxW","mt","map","room","align","as","Link","_hover","backgroundColor","useColorModeValue","width","m","to","name","color","px","src","size","fontWeight","replace","id","SimpleGrid","count","minChildWidth","templateColumns","mapResponsive","value","isNull","n","isNumber","gap","columnGap","rowGap","selector","StackItem","props","flex","minWidth","Stack","direction","spacing","shouldWrapChildren","isInline","directionProp","options","directionStyles","column","marginTop","marginEnd","marginBottom","marginStart","row","getStackStyles","dividerStyle","dividerStyles","my","mx","borderLeftWidth","borderBottomWidth","getDividerStyles","hasDivider","shouldUseChildren","validChildren","getValidChildren","clones","isLast","index","_child","key","_divider","_className","justifyContent","flexWrap","HStack","VStack","Detail","lazy","NewRoom","Chat","textAlign","fontSize","minH","pt","colSpan","fallback","thickness","speed","emptyColor","path","Text","rest","aliasedProps","filterUndefined","textDecoration","textTransform","casing","AvatarBadge","badgeStyles","position","insetEnd","bottom","useStyles","initials","firstName","lastName","AvatarName","getInitials","role","aria-label","label","DefaultIcon","viewBox","height","fill","d","baseStyle","flexShrink","Avatar","useMultiStyleConfig","icon","iconLabel","borderColor","avatarStyles","borderWidth","showBorder","undefined","loading","onError","AvatarImage","status","ignoreFallback","setStatus","imageRef","useRef","load","useCallback","flush","img","event","onLoad","error","crossOrigin","srcSet","sizes","useSafeLayoutEffect","useImage","alt","objectFit"],"mappings":"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","file":"static/js/5.9a9c2832.chunk.js","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n */\nexport const Container = forwardRef<ContainerProps, \"div\">((props, ref) => {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nif (__DEV__) {\n  Container.displayName = \"Container\"\n}\n","import React, { useEffect, useState } from 'react'\nimport {\n    Box,\n    Container,\n    SimpleGrid,\n    Text,\n    Avatar,\n    HStack,\n    VStack,\n    useColorModeValue\n} from '@chakra-ui/react'\nimport { Link } from 'react-router-dom'\nimport api from '../../adaptor/api'\n\nconst RoomList = () => {\n    const [rooms, setrooms] = useState([])\n    useEffect(() => {\n        api.get('chat/room/')\n            .then(res => setrooms(res.data))\n            .catch(res => console.log(res))\n    }, [])\n    if (rooms.length) {\n        return (\n            <Box p={4} bg=\"Highlight\" borderRadius=\"20\">\n                <Container maxW={'6xl'} mt={2}  >\n                    <SimpleGrid >\n                        {rooms.map((room) => (\n                            <HStack key={room.id} align={'top'} as={Link}\n                                _hover={{ backgroundColor: \"blue.200\" }}\n                                // bg=\"InfoBackground\"\n                                // eslint-disable-next-line react-hooks/rules-of-hooks\n                                bg={useColorModeValue(\"facebook.100\", 'gray.700')}\n                                width=\"100%\"\n                                alignItems=\"center\"\n                                borderRadius=\"20\"\n                                p={3} m={3}\n                                to={`/${room.name}`}>\n                                <Box color={'green.400'} px={2}>\n                                    <Avatar src=\"\" name={room.name} size=\"sm\" />\n                                </Box>\n                                <VStack align={'start'}>\n                                    <Text fontWeight={300}>{room.name.replace(/_/g, ' ')}</Text>\n                                </VStack>\n                            </HStack>\n                        ))}\n                    </SimpleGrid></Container>\n            </Box>\n        )\n    }\n    return <></>\n}\n\nexport default RoomList\n","import { ResponsiveValue, forwardRef } from \"@chakra-ui/system\"\nimport { mapResponsive, isNumber, isNull, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component make that providers a simpler interface, and\n * make its easy to create responsive grid layouts.\n *\n * @see Docs https://chakra-ui.com/docs/layout/simple-grid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">((props, ref) => {\n  const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props\n\n  const templateColumns = minChildWidth\n    ? widthToColumns(minChildWidth)\n    : countToColumns(columns)\n\n  return (\n    <Grid\n      ref={ref}\n      gap={spacing}\n      columnGap={spacingX}\n      rowGap={spacingY}\n      templateColumns={templateColumns}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  SimpleGrid.displayName = \"SimpleGrid\"\n}\n\nfunction toPx(n: string | number) {\n  return isNumber(n) ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any) {\n  return mapResponsive(width, (value) =>\n    isNull(value) ? null : `repeat(auto-fit, minmax(${toPx(value)}, 1fr))`,\n  )\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    isNull(value) ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\n/**\n * If we ever run into SSR issues with this, check this post to find a fix for it:\n * @see https://medium.com/@emmenko/patching-lobotomized-owl-selector-for-emotion-ssr-5a582a3c424c\n */\nexport const selector = \"& > *:not(style) ~ *:not(style)\"\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getStackStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const directionStyles = {\n    column: {\n      marginTop: spacing,\n      marginEnd: 0,\n      marginBottom: 0,\n      marginStart: 0,\n    },\n    row: { marginTop: 0, marginEnd: 0, marginBottom: 0, marginStart: spacing },\n    \"column-reverse\": {\n      marginTop: 0,\n      marginEnd: 0,\n      marginBottom: spacing,\n      marginStart: 0,\n    },\n    \"row-reverse\": {\n      marginTop: 0,\n      marginEnd: spacing,\n      marginBottom: 0,\n      marginStart: 0,\n    },\n  }\n\n  return {\n    flexDirection: direction,\n    [selector]: mapResponsive(direction, (value) => directionStyles[value]),\n  }\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(direction, (value) => dividerStyles[value]),\n  }\n}\n","import {\n  chakra,\n  ChakraComponent,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles, getStackStyles, selector } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   */\n  isInline?: boolean\n}\n\nexport interface StackDividerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StackDivider: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__divider\"\n    {...props}\n    __css={{\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\",\n    }}\n  />\n)\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/docs/layout/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const styles = React.useMemo(() => getStackStyles({ direction, spacing }), [\n    direction,\n    spacing,\n  ])\n\n  const dividerStyle = React.useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const validChildren = getValidChildren(children)\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const isLast = index + 1 === validChildren.length\n        const wrappedChild = <StackItem key={index}>{child}</StackItem>\n        const _child = shouldWrapChildren ? wrappedChild : child\n\n        if (!hasDivider) return _child\n\n        const clonedDivider = React.cloneElement(\n          divider as React.ReactElement<any>,\n          { __css: dividerStyle },\n        )\n\n        const _divider = isLast ? null : clonedDivider\n\n        return (\n          <React.Fragment key={index}>\n            {_child}\n            {_divider}\n          </React.Fragment>\n        )\n      })\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={styles.flexDirection}\n      flexWrap={wrap}\n      className={_className}\n      __css={hasDivider ? {} : { [selector]: styles[selector] }}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\"\n}\n\n/**\n * A view that arranges its children in a horizontal line.\n */\nexport const HStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"row\" ref={ref} />\n))\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\"\n}\n\n/**\n * A view that arranges its children in a vertical line.\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\"\n}\n","import React, { lazy, Suspense } from 'react';\nimport {\n    Box,\n    Grid,\n    GridItem,\n    Spinner\n} from '@chakra-ui/react';\nimport RoomList from './RoomList';\nimport {\n    Switch,\n    Route,\n} from \"react-router-dom\";\nconst Detail = lazy(() => import('./Detail'));\nconst NewRoom = lazy(() => import('./NewRoom'));\n\nfunction Chat() {\n    return (\n        <Box textAlign=\"center\" fontSize=\"xl\" >\n            <Grid minH=\"100vh\" pt={3}>\n                <Grid\n                    // templateRows=\"repeat(2, 1fr)\"\n                    templateColumns=\"repeat(5, 1fr)\"\n                    gap={4}\n                >\n                    <GridItem colSpan={1} display={['none', 'none', 'flex']} >\n                        <RoomList />\n                    </GridItem>\n                    <GridItem colSpan={[5, 5, 4]}  >\n                        <Suspense\n                            fallback={<Spinner thickness=\"4px\"\n                                speed=\"0.65s\"\n                                emptyColor=\"gray.200\"\n                                color=\"blue.500\"\n                                size=\"xl\" mx=\"auto\"\n                            />}>\n                            <Switch>\n                                <Route path=\"/:id\">\n                                    <Detail />\n                                </Route>\n                                <Route path=\"/*\">\n                                    <NewRoom />\n                                </Route>\n                            </Switch>\n                        </Suspense>\n                    </GridItem>\n                </Grid>\n\n\n            </Grid>\n        </Box>\n    );\n}\n\nexport default Chat;","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__, filterUndefined } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/docs/typography/text\n */\nexport const Text = forwardRef<TextProps, \"p\">((props, ref) => {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } = omitThemingProps(\n    props,\n  )\n\n  const aliasedProps = filterUndefined({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Text.displayName = \"Text\"\n}\n","import type { ImageProps } from \"@chakra-ui/image\"\nimport { useImage } from \"@chakra-ui/image\"\nimport type {\n  ChakraComponent,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface AvatarOptions {\n  /**\n   * The name of the person in the avatar.\n   *\n   * - if `src` has loaded, the name will be used as the `alt` attribute of the `img`\n   * - If `src` is not loaded, the name will be used to create the initials\n   */\n  name?: string\n  /**\n   * If `true`, the `Avatar` will show a border around it.\n   *\n   * Best for a group of avatars\n   */\n  showBorder?: boolean\n  /**\n   * The badge at the bottom right corner of the avatar.\n   */\n  children?: React.ReactNode\n  /**\n   * The image url of the `Avatar`\n   */\n  src?: string\n  /**\n   * List of sources to use for different screen resolutions\n   */\n  srcSet?: string\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * The border color of the avatar\n   * @type SystemProps[\"borderColor\"]\n   */\n  borderColor?: SystemProps[\"borderColor\"]\n  /**\n   * Function called when image failed to load\n   */\n  onError?: () => void\n  /**\n   * The default avatar used as fallback when `name`, and `src`\n   * is not specified.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * Function to get the initials to display\n   */\n  getInitials?: (name: string) => string\n}\n\nexport interface AvatarBadgeProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * AvatarBadge used to show extra badge to the top-right\n * or bottom-right corner of an avatar.\n */\nexport const AvatarBadge = forwardRef<AvatarBadgeProps, \"div\">((props, ref) => {\n  const styles = useStyles()\n\n  const badgeStyles: SystemStyleObject = {\n    position: \"absolute\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    insetEnd: \"0\",\n    bottom: \"0\",\n    ...styles.badge,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      {...props}\n      className={cx(\"chakra-avatar__badge\", props.className)}\n      __css={badgeStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  AvatarBadge.displayName = \"AvatarBadge\"\n}\n\nfunction initials(name: string) {\n  const [firstName, lastName] = name.split(\" \")\n  return firstName && lastName\n    ? `${firstName.charAt(0)}${lastName.charAt(0)}`\n    : firstName.charAt(0)\n}\n\ninterface AvatarNameProps\n  extends HTMLChakraProps<\"div\">,\n    Pick<AvatarOptions, \"name\" | \"getInitials\"> {}\n\n/**\n * The avatar name container\n */\nconst AvatarName: React.FC<AvatarNameProps> = (props) => {\n  const { name, getInitials, ...rest } = props\n  const styles = useStyles()\n\n  return (\n    <chakra.div role=\"img\" aria-label={name} {...rest} __css={styles.label}>\n      {name ? getInitials?.(name) : null}\n    </chakra.div>\n  )\n}\n\n/**\n * Fallback avatar react component.\n * This should be a generic svg used to represent an avatar\n */\nconst DefaultIcon: ChakraComponent<\"svg\"> = (props) => (\n  <chakra.svg\n    viewBox=\"0 0 128 128\"\n    color=\"#fff\"\n    width=\"100%\"\n    height=\"100%\"\n    className=\"chakra-avatar__svg\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n    />\n    <path\n      fill=\"currentColor\"\n      d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n    />\n  </chakra.svg>\n)\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<HTMLChakraProps<\"span\">, \"onError\">,\n    AvatarOptions,\n    ThemingProps<\"Avatar\"> {\n  iconLabel?: string\n}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n\n  const {\n    src,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    getInitials = initials,\n    icon = <DefaultIcon />,\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles: SystemStyleObject = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      __css={avatarStyles}\n    >\n      <StylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          loading={loading}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n          iconLabel={iconLabel}\n        />\n        {children}\n      </StylesProvider>\n    </chakra.span>\n  )\n})\n\nif (__DEV__) {\n  Avatar.displayName = \"Avatar\"\n}\n\ninterface AvatarImageProps\n  extends ImageProps,\n    Pick<AvatarProps, \"getInitials\" | \"borderRadius\" | \"icon\" | \"name\"> {\n  iconLabel?: string\n}\n\nconst AvatarImage: React.FC<AvatarImageProps> = (props) => {\n  const {\n    src,\n    onError,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = <DefaultIcon />,\n  } = props\n\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n  const status = useImage({ src, onError })\n\n  const hasLoaded = status === \"loaded\"\n\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n  const showFallback = !src || !hasLoaded\n\n  if (showFallback) {\n    return name ? (\n      <AvatarName\n        className=\"chakra-avatar__initials\"\n        getInitials={getInitials}\n        name={name}\n      />\n    ) : (\n      React.cloneElement(icon, {\n        role: \"img\",\n        \"aria-label\": iconLabel,\n      })\n    )\n  }\n\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n  return (\n    <chakra.img\n      src={src}\n      alt={name}\n      className=\"chakra-avatar__img\"\n      loading={loading}\n      __css={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius,\n      }}\n    />\n  )\n}\n\nif (__DEV__) {\n  AvatarImage.displayName = \"AvatarImage\"\n}\n","import { useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  ImgHTMLAttributes,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?(event: React.SyntheticEvent<HTMLImageElement, Event>): void\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?(error: string | React.SyntheticEvent<HTMLImageElement, Event>): void\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: ImgHTMLAttributes<any>[\"crossOrigin\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and let's us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n\n    img.src = src\n\n    if (crossOrigin) {\n      img.crossOrigin = crossOrigin\n    }\n\n    if (srcSet) {\n      img.srcset = srcSet\n    }\n\n    if (sizes) {\n      img.sizes = sizes\n    }\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.((event as unknown) as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n"],"sourceRoot":""}