{"version":3,"sources":["../../../src/simple-grid.tsx","../../../src/center.tsx","components/Auth/Login/index.js","components/Auth/SignUp/Signup.js","components/Auth/index.js"],"names":["SimpleGrid","forwardRef","count","width","minChildWidth","templateColumns","mapResponsive","value","isNull","n","isNumber","ref","gap","columnGap","rowGap","Center","chakra","baseStyle","display","alignItems","justifyContent","LoggedIn","lazy","Login","dispatch","useDispatch","user","useSelector","state","useState","username","setusername","password","setpassword","py","mx","fallback","colSpan","base","md","as","mb","rounded","shadow","onSubmit","e","preventDefault","loginData","login","pb","color","useColorModeValue","pt","columns","px","spacing","borderBottom","borderColor","mt","type","placeholder","required","onChange","target","w","bg","p","fontSize","textAlign","a","Link","to","Signup","email","setemail","history","useHistory","toast","useToast","api","post","then","res","title","description","status","duration","isClosable","push","catch","err","console","log","Auth","match","useRouteMatch","path","exact"],"mappings":"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","file":"static/js/6.2c5db0f4.chunk.js","sourcesContent":["import { ResponsiveValue, forwardRef } from \"@chakra-ui/system\"\nimport { mapResponsive, isNumber, isNull, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component make that providers a simpler interface, and\n * make its easy to create responsive grid layouts.\n *\n * @see Docs https://chakra-ui.com/docs/layout/simple-grid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">((props, ref) => {\n  const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props\n\n  const templateColumns = minChildWidth\n    ? widthToColumns(minChildWidth)\n    : countToColumns(columns)\n\n  return (\n    <Grid\n      ref={ref}\n      gap={spacing}\n      columnGap={spacingX}\n      rowGap={spacingY}\n      templateColumns={templateColumns}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  SimpleGrid.displayName = \"SimpleGrid\"\n}\n\nfunction toPx(n: string | number) {\n  return isNumber(n) ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any) {\n  return mapResponsive(width, (value) =>\n    isNull(value) ? null : `repeat(auto-fit, minmax(${toPx(value)}, 1fr))`,\n  )\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    isNull(value) ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface CenterProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * React component used to horizontally and vertically center its child.\n * It uses the popular `display: flex` centering technique.\n *\n * @see Docs https://chakra-ui.com/docs/layout/center\n */\nexport const Center = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n})\n\nif (__DEV__) {\n  Center.displayName = \"Center\"\n}\n\nexport interface AbsoluteCenterProps extends HTMLChakraProps<\"div\"> {\n  axis?: \"horizontal\" | \"vertical\" | \"both\"\n}\n\nconst centerStyles = {\n  horizontal: {\n    insetStart: \"50%\",\n    transform: \"translateX(-50%)\",\n  },\n  vertical: {\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n  both: {\n    insetStart: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n}\n\n/**\n * React component used to horizontally and vertically center an element\n * relative to its parent dimensions.\n *\n * It uses the `position: absolute` strategy.\n *\n * @see Docs https://chakra-ui.com/docs/layout/center\n * @see WebDev https://web.dev/centering-in-css/#5.-pop-and-plop\n */\nexport const AbsoluteCenter = forwardRef<AbsoluteCenterProps, \"div\">(\n  (props, ref) => {\n    const { axis = \"both\", ...rest } = props\n    return (\n      <chakra.div\n        ref={ref}\n        __css={centerStyles[axis]}\n        {...rest}\n        position=\"absolute\"\n      />\n    )\n  },\n)\n","import React, { useState, lazy, Suspense } from \"react\";\nimport {\n    Box,\n    GridItem,\n    useColorModeValue,\n    Button,\n    Center,\n    Flex,\n    chakra,\n    SimpleGrid,\n    VisuallyHidden,\n    Input,\n} from \"@chakra-ui/react\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport { login } from '../../../store/user'\nimport { Spinner } from \"@chakra-ui/react\"\nconst LoggedIn = lazy(() => import('./LoggedIn'));\nconst Login = () => {\n    const dispatch = useDispatch()\n    const { user } = useSelector(state => state.user)\n    const [username, setusername] = useState(\"\")\n    const [password, setpassword] = useState(\"\")\n    const handleSignIn = (e) => {\n        e.preventDefault();\n        const loginData = {\n            username, password\n        }\n        dispatch(login(loginData))\n    }\n    return (\n        <Box py=\"auto\" mx=\"auto\" >\n            <SimpleGrid\n                alignItems=\"center\"\n                width={[300, 400, 500]}\n                mx=\"auto\"\n            >\n                {!user ? <GridItem colSpan={{ base: \"auto\", md: 4 }}>\n                    <Box as=\"form\" mb={6} rounded=\"lg\" shadow=\"xl\" onSubmit={handleSignIn}>\n                        <Center pb={0}\n                            // eslint-disable-next-line react-hooks/rules-of-hooks\n                            color={useColorModeValue(\"gray.700\", \"gray.600\")}>\n                            <p pt={2}>Login</p>\n                        </Center>\n                        <SimpleGrid\n                            columns={1}\n                            px={6}\n                            py={4}\n                            spacing={4}\n                            borderBottom=\"solid 1px\"\n                            // eslint-disable-next-line react-hooks/rules-of-hooks\n                            borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n                        >\n                            <Flex>\n                                <VisuallyHidden>Username</VisuallyHidden>\n                                <Input\n                                    mt={0}\n                                    type=\"text\"\n                                    placeholder=\"Username\"\n                                    required={true}\n                                    onChange={(e) => setusername(e.target.value)}\n                                />\n                            </Flex>\n                            <Flex>\n                                <VisuallyHidden>Password</VisuallyHidden>\n                                <Input\n                                    mt={0}\n                                    type=\"password\"\n                                    placeholder=\"Password\"\n                                    required={true}\n                                    onChange={(e) => setpassword(e.target.value)}\n\n                                />\n                            </Flex>\n                            <Button w=\"full\" bg=\"blue.200\" py={2} type=\"submit\">\n                                Sign in\n                            </Button>\n                        </SimpleGrid>\n                    </Box>\n                    <chakra.p fontSize=\"md\" textAlign=\"center\" color=\"gray.600\">\n                        Don't have an account?{\" \"}\n                        <chakra.a color=\"blue.500\" as={Link} to=\"/auth/signup\">\n                            Signup\n            </chakra.a> {\" \"} here\n                    </chakra.p>\n                </GridItem> :\n                    <Suspense fallback={<Spinner />}>\n                        <LoggedIn />\n                    </Suspense>\n\n                }\n            </SimpleGrid>\n        </Box>\n    );\n};\n\nexport default Login;","import React, { useState } from \"react\";\nimport {\n    Box,\n    GridItem,\n    useColorModeValue,\n    Button,\n    Center,\n    Flex,\n    chakra,\n    SimpleGrid,\n    VisuallyHidden,\n    Input,\n} from \"@chakra-ui/react\";\nimport { Link } from \"react-router-dom\";\nimport api from '../../../adaptor/api'\nimport { useToast } from \"@chakra-ui/react\"\nimport { useHistory } from 'react-router-dom'\nconst Signup = () => {\n    const [username, setusername] = useState(\"\")\n    const [email, setemail] = useState(\"\")\n    const [password, setpassword] = useState(\"\")\n    const history = useHistory();\n    const toast = useToast()\n    const handleRegistration = (e) => {\n        e.preventDefault();\n        api.post('/auth/users/', { username, password, email })\n            .then(res => {\n                // console.log(res)\n                toast({\n                    title: \"Account created.\",\n                    description: \"We've created your account for you with provided credentials\",\n                    status: \"success\",\n                    duration: 9000,\n                    isClosable: true,\n                })\n                history.push(`/auth`);\n            })\n            .catch(err => {\n                console.log(err)\n                toast({\n                    title: \"Account creation failed\",\n                    description: \"please check credentials again or try changing username or email or both\",\n                    status: \"error\",\n                    duration: 9000,\n                    isClosable: true,\n                })\n            })\n    }\n    return (\n        <Box px={8} py={24} mx=\"auto\">\n            <SimpleGrid\n                alignItems=\"center\"\n                width={[300, 400, 500]}\n                mx=\"auto\"\n            >\n                <GridItem colSpan={{ base: \"auto\", md: 4 }}>\n                    <Box as=\"form\" mb={6} rounded=\"lg\" shadow=\"xl\" onSubmit={handleRegistration}>\n                        <Center pb={0} color={useColorModeValue(\"gray.700\", \"gray.600\")}>\n                            <p pt={2}>Signup</p>\n                        </Center>\n                        <SimpleGrid\n                            columns={1}\n                            px={6}\n                            py={4}\n                            spacing={4}\n                            borderBottom=\"solid 1px\"\n                            borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n                        >\n                            <Flex>\n                                <VisuallyHidden>Username</VisuallyHidden>\n                                <Input\n                                    mt={0}\n                                    type=\"text\"\n                                    placeholder=\"Username\"\n                                    required={true}\n                                    onChange={(e) => setusername(e.target.value)}\n                                />\n                            </Flex>\n                            <Flex>\n                                <VisuallyHidden>Email Address</VisuallyHidden>\n                                <Input\n                                    mt={0}\n                                    type=\"email\"\n                                    placeholder=\"Email\"\n                                    required={true}\n                                    onChange={(e) => setemail(e.target.value)}\n                                />\n                            </Flex>\n                            <Flex>\n                                <VisuallyHidden>Password</VisuallyHidden>\n                                <Input\n                                    mt={0}\n                                    type=\"password\"\n                                    placeholder=\"Password\"\n                                    required={true}\n                                    onChange={(e) => setpassword(e.target.value)}\n                                />\n                            </Flex>\n                            <Button w=\"full\" bg=\"blue.200\" py={2} type=\"submit\">\n                                Sign up\n                            </Button>\n                        </SimpleGrid>\n                    </Box>\n                    <chakra.p fontSize=\"md\" textAlign=\"center\" color=\"gray.600\">\n                        Already have an account?{\" \"}\n                        <chakra.a color=\"blue.500\" as={Link} to=\"/auth/\">\n                            Signin\n            </chakra.a> {\" \"} here\n                    </chakra.p>\n                </GridItem>\n            </SimpleGrid>\n        </Box>\n    );\n};\n\nexport default Signup;","import React from 'react'\nimport { Switch, Route, useRouteMatch } from 'react-router-dom'\nimport Login from './Login'\nimport Signup from './SignUp/Signup'\nconst Auth = () => {\n    const match = useRouteMatch()\n    return (\n        <>\n            <Switch>\n                <Route path={`${match.path}/`} exact>\n                    <Login />\n                </Route>\n                <Route path={`${match.path}/signup`} exact>\n                    <Signup />\n                </Route>\n            </Switch>\n        </>\n    )\n}\n\nexport default Auth\n"],"sourceRoot":""}