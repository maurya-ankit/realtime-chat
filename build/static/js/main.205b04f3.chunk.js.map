{"version":3,"sources":["ColorModeSwitcher.js","App.js","reportWebVitals.js","serviceWorker.js","store/index.js","index.js","store/user.js","adaptor/api.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","Chat","lazy","Auth","App","user","useSelector","state","dispatch","useDispatch","theme","textAlign","minH","bg","p","borderBottomRadius","maxH","display","base","md","logout","colorScheme","mr","justifySelf","as","Button","rightIcon","Hamburger","pl","mx","Link","to","fallback","thickness","speed","emptyColor","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","reducer","combineReducers","store","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","initialUser","localStorage","getItem","JSON","parse","slice","createSlice","name","initialState","reducers","loginSuccess","action","payload","setItem","stringify","logoutSuccess","removeItem","actions","login","username","password","a","api","post","res","token","data","auth_token","axios","create","baseURL","headers","interceptors","request","use","config","Promise","reject"],"mappings":"sRAIaA,EAAoB,SAAAC,GAC/B,IAAQC,EAAoBC,cAApBD,gBACFE,EAAOC,YAAkB,OAAQ,SACjCC,EAAaD,YAAkBE,IAAQC,KAE7C,OACE,cAAC,IAAD,aACEC,KAAK,KACLC,SAAS,KACTC,aAAA,oBAAyBP,EAAzB,SACAQ,QAAQ,QACRC,MAAM,UACNC,WAAW,IACXC,QAASb,EACTc,KAAM,cAACV,EAAD,KACFL,K,yCCQJgB,EAAOC,gBAAK,kBAAM,iCAClBC,EAAOD,gBAAK,kBAAM,uDAwFTE,MAtFf,WACE,IAAQC,EAASC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,QAApCA,KACFG,EAAWC,cAGjB,OACE,cAAC,IAAD,CAAgBC,MAAOA,QAAvB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKC,UAAU,SAASjB,SAAS,KAAjC,SACE,eAAC,IAAD,CAAMkB,KAAK,QAAX,UACE,eAAC,IAAD,CAAMC,GAAIxB,YAAkB,YAAa,YAAayB,EAAG,EAAGC,mBAAmB,KAAKC,KAAM,GAA1F,UACE,cAAC,IAAD,CAAKF,EAAE,IAAP,SACE,cAAC,IAAD,CAASrB,KAAK,KAAd,iCAEF,cAAC,IAAD,IACA,cAAC,IAAD,UACGY,EACC,qCACE,eAAC,IAAD,CAAKY,QAAS,CAAEC,KAAM,OAAQC,GAAI,QAAlC,UACE,cAAC,IAAD,CAAQpB,QAAS,kBAAMS,EAASY,gBAAWC,YAAY,WAAWC,GAAI,CAAC,EAAG,EAAG,GAA7E,oBAGA,cAAC,EAAD,CAAmBC,YAAY,gBAGjC,eAAC,IAAD,CAAMN,QAAS,CAAEC,KAAM,QAASC,GAAI,QAApC,UACE,cAAC,IAAD,CAAYK,GAAIC,IAAQC,UAAW,cAACC,EAAA,EAAD,IAAmBV,QAAS,CAAEC,KAAM,QAASC,GAAI,QAAUS,GAAG,IAAIC,GAAG,MACxG,eAAC,IAAD,WACE,cAAC,IAAD,CAAQ9B,QAAS,kBAAMS,EAASY,gBAAWC,YAAY,WAAWC,GAAI,CAAC,EAAG,EAAG,GAA7E,oBAGA,cAAC,EAAD,CAAmBC,YAAY,sBAKrC,qCACE,eAAC,IAAD,CAAKN,QAAS,CAAEC,KAAM,OAAQC,GAAI,QAAlC,UACE,cAAC,IAAD,CAAQK,GAAIM,IAAMC,GAAG,eAAeV,YAAY,WAAWQ,GAAI,CAAC,EAAG,EAAG,GAAtE,qBAGA,cAAC,IAAD,CAAQR,YAAY,WAAWG,GAAIM,IAAMC,GAAG,SAASF,GAAI,CAAC,EAAG,EAAG,GAAhE,oBACA,cAAC,EAAD,CAAmBN,YAAY,WAAWM,GAAG,YAG/C,eAAC,IAAD,WACE,cAAC,IAAD,CAAYL,GAAIC,IAAQC,UAAW,cAACC,EAAA,EAAD,IAAmBV,QAAS,CAAEC,KAAM,QAASC,GAAI,QAAUS,GAAG,IAAIC,GAAG,MACxG,eAAC,IAAD,WACE,cAAC,IAAD,CAAQL,GAAIM,IAAMC,GAAG,eAAeV,YAAY,WAAWQ,GAAI,EAA/D,qBAGA,cAAC,IAAD,CAAQR,YAAY,WAAWG,GAAIM,IAAMC,GAAG,SAASF,GAAI,EAAzD,oBACA,cAAC,EAAD,CAAmBN,YAAY,WAAWM,GAAG,uBAOzD,cAAC,WAAD,CACEG,SAAU,cAAC,IAAD,CAASC,UAAU,MAC3BC,MAAM,QACNC,WAAW,WACXtC,MAAM,WACNJ,KAAK,KAAKoC,GAAG,SALjB,SAOE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOO,KAAK,QAAZ,SACE,cAACjC,EAAD,MAEDE,EACC,cAAC,IAAD,CAAO+B,KAAK,IAAZ,SACE,cAACnC,EAAD,MAEF,cAAC,IAAD,CAAU8B,GAAG,yBC5FhBM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCfAC,EAAUC,YAAgB,CAE5B/C,WAKWgD,EAHDC,YAAe,CACzBH,YCAJI,IAASC,OACP,cAAC,aAAD,UACE,eAAC,IAAD,CAAUH,MAAOA,EAAjB,UACE,cAAC,IAAD,IACA,cAAC,EAAD,SAGJI,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,YE/G5B9B,K,iJCvBM+B,EAAcC,aAAaC,QAAQ,QACnCC,KAAKC,MAAMH,aAAaC,QAAQ,SAChC,KACAG,EAAQC,YAAY,CACtBC,KAAM,OACNC,aAAc,CACVvE,KAAM+D,GAEVS,SAAU,CACNC,aAAc,SAACvE,EAAOwE,GAClBxE,EAAMF,KAAO0E,EAAOC,QACpBX,aAAaY,QAAQ,OAAQV,KAAKW,UAAUH,EAAOC,WAEvDG,cAAe,SAAC5E,EAAOwE,GACnBxE,EAAMF,KAAO,KACbgE,aAAae,WAAW,YAIrBX,MAAf,QAEA,MAAwCA,EAAMY,QAAtCP,EAAR,EAAQA,aAAcK,EAAtB,EAAsBA,cACTG,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAb,8CAA4B,WAAMhF,GAAN,iBAAAiF,EAAA,+EAEvBC,IAAIC,KAAK,qBAAsB,CAAEJ,WAAUC,aAFpB,OAEnCI,EAFmC,OAGzCpF,EAASsE,EAAa,CAAES,WAAUM,MAAK,UAAED,EAAIE,YAAN,aAAE,EAAUC,cAHV,yEAKlC7B,QAAQD,MAAM,KAAEE,UALkB,yDAA5B,uDAQR/C,EAAS,yDAAM,WAAMZ,GAAN,SAAAiF,EAAA,+EAEdC,IAAIC,KAAK,qBAFK,gCAGbnF,EAAS2E,MAHI,yDAKbjB,QAAQD,MAAM,KAAEE,UALH,wDAAN,wD,gCCjCtB,aACMuB,EADN,OACYM,EAAMC,OAAO,CACrBC,QAAS,IACTC,QAAS,CACL,eAAgB,sBAGxBT,EAAIU,aAAaC,QAAQC,KACrB,SAAAC,GAAW,IAAD,EACAV,EAAK,UAAGtB,KAAKC,MAAMH,aAAaC,QAAQ,gBAAnC,aAAG,EAA0CuB,MAIxD,OAHIA,IACAU,EAAOJ,QAAP,8BAA2CN,IAExCU,KAEX,SAAAtC,GAAK,OAAIuC,QAAQC,OAAOxC,MAEbyB,Q","file":"static/js/main.205b04f3.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React, { lazy, Suspense } from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Grid,\n  theme,\n  Spinner,\n  Flex,\n  Button,\n  Spacer,\n  Heading,\n  Menu,\n  MenuButton,\n  MenuList,\n  useColorModeValue\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  Link,\n} from \"react-router-dom\";\nimport { HamburgerIcon } from '@chakra-ui/icons'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { logout } from './store/user'\nconst Chat = lazy(() => import('./components/Chat'));\nconst Auth = lazy(() => import('./components/Auth'));\n\nfunction App() {\n  const { user } = useSelector(state => state.user)\n  const dispatch = useDispatch()\n\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Router>\n        <Box textAlign=\"center\" fontSize=\"xl\">\n          <Grid minH=\"100vh\">\n            <Flex bg={useColorModeValue(\"Highlight\", 'gray.700')} p={4} borderBottomRadius=\"20\" maxH={20} >\n              <Box p=\"2\">\n                <Heading size=\"md\">Realtime Chat App</Heading>\n              </Box>\n              <Spacer />\n              <Box>\n                {user ?\n                  <>\n                    <Box display={{ base: \"none\", md: \"flex\" }}>\n                      <Button onClick={() => dispatch(logout())} colorScheme=\"telegram\" mr={[0, 1, 2]}>\n                        Logout\n                </Button>\n                      <ColorModeSwitcher justifySelf=\"flex-end\" />\n\n                    </Box>\n                    <Menu display={{ base: 'block', md: 'none' }}>\n                      <MenuButton as={Button} rightIcon={<HamburgerIcon />} display={{ base: \"block\", md: \"none\" }} pl=\"2\" mx=\"2\" />\n                      <MenuList>\n                        <Button onClick={() => dispatch(logout())} colorScheme=\"telegram\" mr={[0, 1, 2]}>\n                          Logout\n                </Button>\n                        <ColorModeSwitcher justifySelf=\"flex-end\" />\n                      </MenuList>\n                    </Menu>\n                  </>\n                  :\n                  <>\n                    <Box display={{ base: \"none\", md: \"flex\" }}>\n                      <Button as={Link} to=\"/auth/signup\" colorScheme=\"facebook\" mx={[0, 1, 2]}>\n                        Sign Up\n                </Button>\n                      <Button colorScheme=\"linkedin\" as={Link} to=\"/auth/\" mx={[0, 1, 2]} >Log in</Button>\n                      <ColorModeSwitcher justifySelf=\"flex-end\" mx=\"auto\" />\n\n                    </Box>\n                    <Menu >\n                      <MenuButton as={Button} rightIcon={<HamburgerIcon />} display={{ base: \"block\", md: \"none\" }} pl=\"2\" mx=\"2\" />\n                      <MenuList>\n                        <Button as={Link} to=\"/auth/signup\" colorScheme=\"facebook\" mx={2}>\n                          Sign Up\n                </Button>\n                        <Button colorScheme=\"linkedin\" as={Link} to=\"/auth/\" mx={2}>Log in</Button>\n                        <ColorModeSwitcher justifySelf=\"flex-end\" mx=\"auto\" />\n                      </MenuList>\n                    </Menu>\n                  </>}\n\n              </Box>\n            </Flex>\n            <Suspense\n              fallback={<Spinner thickness=\"4px\"\n                speed=\"0.65s\"\n                emptyColor=\"gray.200\"\n                color=\"blue.500\"\n                size=\"xl\" mx=\"auto\"\n              />}>\n              <Switch>\n                <Route path=\"/auth\">\n                  <Auth />\n                </Route>\n                {user ?\n                  <Route path=\"/\" >\n                    <Chat />\n                  </Route> :\n                  <Redirect to=\"/auth\" />\n                }\n\n              </Switch>\n            </Suspense>\n          </Grid>\n        </Box>\n      </Router>\n    </ChakraProvider>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport { combineReducers } from 'redux'\nimport user from './user'\nconst reducer = combineReducers({\n    // here we will be adding reducers\n    user,\n})\nconst store = configureStore({\n    reducer,\n})\nexport default store;","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store'\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <ColorModeScript />\n      <App />\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createSlice } from '@reduxjs/toolkit'\n// Slice\nimport api from '../adaptor/api'\nconst initialUser = localStorage.getItem('user')\n    ? JSON.parse(localStorage.getItem('user'))\n    : null\nconst slice = createSlice({\n    name: 'user',\n    initialState: {\n        user: initialUser,\n    },\n    reducers: {\n        loginSuccess: (state, action) => {\n            state.user = action.payload;\n            localStorage.setItem('user', JSON.stringify(action.payload))\n        },\n        logoutSuccess: (state, action) => {\n            state.user = null;\n            localStorage.removeItem('user')\n        },\n    },\n});\nexport default slice.reducer\n// Actions\nconst { loginSuccess, logoutSuccess } = slice.actions\nexport const login = ({ username, password }) => async dispatch => {\n    try {\n        const res = await api.post('/auth/token/login/', { username, password })\n        dispatch(loginSuccess({ username, token: res.data?.auth_token }));\n    } catch (e) {\n        return console.error(e.message);\n    }\n}\nexport const logout = () => async dispatch => {\n    try {\n        await api.post('auth/token/logout')\n        return dispatch(logoutSuccess())\n    } catch (e) {\n        return console.error(e.message);\n    }\n}","import axios from 'axios'\nconst api = axios.create({\n    baseURL: '/',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n})\napi.interceptors.request.use(\n    config => {\n        const token = JSON.parse(localStorage.getItem('user'))?.token\n        if (token) {\n            config.headers['Authorization'] = `Token ${token}`\n        }\n        return config\n    },\n    error => Promise.reject(error)\n)\nexport default api"],"sourceRoot":""}