{"version":3,"sources":["components/Chat/SingleChat.js","components/Chat/AddUser.js","components/Chat/Detail.js"],"names":["SingleChat","props","user","useSelector","state","direction","spacing","my","alignItems","justifyContent","data","username","mx","bg","useColorModeValue","py","px","borderRadius","maxWidth","align","fontSize","message","color","fromNow","utc_time","src","name","size","AddUser","toast","useToast","id","useParams","useState","person","setperson","as","mb","rounded","shadow","onSubmit","e","preventDefault","api","post","then","res","title","status","duration","isClosable","catch","err","description","pb","pt","columns","borderBottom","borderColor","mt","type","placeholder","required","value","onChange","target","w","Detail","initialUrl","JSON","parse","localStorage","getItem","token","socketUrl","setsocketUrl","messages","setmessages","roomInfo","setroomInfo","useWebSocket","sendMessage","lastMessage","readyState","useEffect","get","prev","console","log","document","toUpperCase","concat","handleClickSendMessage","useCallback","stringify","connectionStatus","ReadyState","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","p","leftIcon","ArrowBack","Link","to","ml","replace","mr","display","base","lg","total_members","pr","public","colorScheme","admin","Button","rightIcon","ChevronDown","roomId","overflowY","height","map","idx","form","bottom","position","alignSelf","variant","minWidth","width"],"mappings":"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","file":"static/js/8.3aeb7e4c.chunk.js","sourcesContent":["import { Avatar } from '@chakra-ui/avatar'\nimport { Text, Stack, useColorModeValue } from '@chakra-ui/react'\nimport React from 'react'\nimport Moment from 'react-moment';\nimport { useSelector } from 'react-redux'\n\nconst SingleChat = (props) => {\n    const { user } = useSelector(state => state.user)\n\n    return (\n        <div>\n\n            <Stack direction=\"row\" spacing=\"8\" my={2} alignItems=\"center\"\n\n                justifyContent={props.data?.user === user?.username ? \"flex-end\" : \"flex-start\"} mx={10}>\n                {props.data?.user === user?.username ?\n\n                    // eslint-disable-next-line react-hooks/rules-of-hooks\n                    <Stack direction=\"row\" bg={useColorModeValue(\"linkedin.200\", \"facebook.600\")} py=\"3\" px={6} borderRadius=\"30\"\n                        maxWidth=\"400\" alignItems=\"flex-end\"\n                        spacing={4}>\n\n                        <Stack   >\n                            <Text align=\"end\" fontSize=\"lg\">\n                                {props.data.message}\n                            </Text>\n                            <Text color=\"gray.500\" fontSize=\"sm\" align=\"end\">\n                                <Moment fromNow>{props.data.utc_time}</Moment>\n\n                            </Text>\n                        </Stack>\n                        <Stack align=\"center\">\n                            <Avatar src=\"\" name={props.data?.user} size=\"sm\" bg=\"blue.100\" />\n                            <Text color=\"gray.500\" fontSize=\"sm\" align=\"start\">\n                                {props.data?.user}\n\n                            </Text>\n                        </Stack>\n                    </Stack>\n\n                    : <Stack direction=\"row\" spacing={4}\n                        // eslint-disable-next-line react-hooks/rules-of-hooks\n                        bg={useColorModeValue(\"facebook.100\", 'gray.600')} py=\"3\" px={6} borderRadius=\"30\" maxWidth=\"400\"\n                        alignItems=\"flex-end\"\n                    >\n                        <Stack align=\"center\">\n                            <Avatar src=\"\" name={props.data?.user} size=\"sm\" bg=\"blue.100\" />\n                            <Text color=\"gray.500\" fontSize=\"sm\" align=\"start\">\n                                {props.data?.user}\n\n                            </Text>\n                        </Stack>\n                        <Stack>\n\n                            <Text align=\"start\" fontSize=\"lg\">\n                                {props.data.message}\n                            </Text>\n                            <Text color=\"gray.500\" fontSize=\"sm\" align=\"start\">\n                                <Moment fromNow>{props.data.utc_time}</Moment>\n\n                            </Text>\n                        </Stack>\n                    </Stack>\n                }\n\n\n            </Stack>\n        </div>\n    )\n}\n\nexport default SingleChat\n","import React, { useState } from 'react'\nimport {\n    Box,\n    Center,\n    useColorModeValue,\n    SimpleGrid,\n    Flex,\n    VisuallyHidden,\n    Input,\n    Button,\n} from '@chakra-ui/react'\nimport { useToast } from \"@chakra-ui/react\"\n\nimport api from '../../adaptor/api';\nimport { useParams } from 'react-router-dom'\nconst AddUser = (props) => {\n    const toast = useToast()\n\n    const { id } = useParams()\n    const [person, setperson] = useState(\"\")\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        api.post('chat/membership/', { person, 'room': id })\n            .then(res => {\n\n                toast({\n                    title: `Added ${person} to room`,\n                    // description: \"Try \",\n                    status: \"success\",\n                    duration: 1000,\n                    isClosable: true,\n                })\n                setperson(\"\")\n            })\n            .catch(err => {\n                toast({\n                    title: `Unable to ${person} to room`,\n                    description: \"Either username is wrong or person is already in room\",\n                    status: \"error\",\n                    duration: 1000,\n                    isClosable: true,\n                })\n            })\n    }\n    return (\n        <Box as=\"form\" mb={6} rounded=\"lg\" shadow=\"xl\" onSubmit={handleSubmit} >\n            <Center pb={0}\n                // eslint-disable-next-line react-hooks/rules-of-hooks\n                color={useColorModeValue(\"gray.700\", \"gray.600\")}>\n                <p pt={2}>Login</p>\n            </Center>\n            <SimpleGrid\n                columns={1}\n                px={6}\n                py={4}\n                spacing={4}\n                borderBottom=\"solid 1px\"\n                // eslint-disable-next-line react-hooks/rules-of-hooks\n                borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n            >\n                <Flex>\n                    <VisuallyHidden>Username</VisuallyHidden>\n                    <Input\n                        mt={0}\n                        type=\"text\"\n                        placeholder=\"Username\"\n                        required={true}\n                        value={person}\n                        onChange={(e) => setperson(e.target.value)}\n                    />\n                </Flex>\n                <Button w=\"full\" bg=\"blue.200\" py={2} type=\"submit\">\n                    Add to room\n                </Button>\n            </SimpleGrid>\n        </Box>\n    )\n}\n\nexport default AddUser\n","import {\n    Button,\n    chakra,\n    InputGroup,\n    Input,\n    InputRightElement,\n    Stack,\n    Flex,\n    Box,\n    Spacer,\n    Heading,\n    Text,\n    Menu,\n    MenuButton,\n    MenuList,\n    Tag,\n    Avatar,\n    TagLabel,\n} from '@chakra-ui/react'\nimport React, { useState, useEffect, useCallback } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport SingleChat from './SingleChat';\nimport { ArrowBackIcon, ChevronDownIcon } from '@chakra-ui/icons'\nimport { useSelector } from 'react-redux'\nimport { useToast } from \"@chakra-ui/react\"\nimport api from '../../adaptor/api';\nimport AddUser from './AddUser';\nconst Detail = () => {\n    const { id } = useParams()\n    const { user } = useSelector(state => state.user)\n    const toast = useToast()\n    const initialUrl = `ws://127.0.0.1:8000/ws/chat/${id}/?token=${JSON.parse(localStorage.getItem('user')).token}`\n\n    const [socketUrl, setsocketUrl] = useState(initialUrl)\n    const [messages, setmessages] = useState([])\n    const [roomInfo, setroomInfo] = useState({})\n    const {\n        sendMessage,\n        lastMessage,\n        readyState,\n    } = useWebSocket(socketUrl);\n    useEffect(() => {\n        setsocketUrl(`ws://127.0.0.1:8000/ws/chat/${id}/?token=${JSON.parse(localStorage.getItem('user')).token}`)\n        api.get(`chat/messages/?room=${id}`)\n            .then(res => {\n                setmessages(prev => [...res.data, ...prev])\n            })\n            .catch(err => console.log(err))\n        setmessages([])\n        document.title = `${id}`.toUpperCase()\n    }, [id])\n\n    useEffect(() => {\n        if (lastMessage) {\n            setmessages(prev => prev.concat(JSON.parse(lastMessage.data)))\n            if (JSON.parse(lastMessage.data).user === user.username) {\n                toast({\n                    title: `message sent`,\n                    // description: \"Try \",\n                    status: \"success\",\n                    duration: 1000,\n                    isClosable: true,\n                })\n            }\n            else {\n                toast({\n                    title: `message from ${JSON.parse(lastMessage.data).user}`,\n                    description: `${JSON.parse(lastMessage.data).message}`,\n                    status: \"info\",\n                    duration: 2000,\n                    isClosable: true,\n                })\n            }\n\n        }\n\n        // console.log(messages)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [lastMessage])\n    useEffect(() => {\n        api.get(`chat/room/${id}`)\n            .then((res) => {\n                // console.log(res.data)\n                setroomInfo(res.data)\n            })\n            .catch(() => {\n\n            })\n    }, [id])\n    const handleClickSendMessage = useCallback((e) => {\n        e.preventDefault()\n        sendMessage(JSON.stringify({\n            message: e.target.message.value,\n        }))\n        e.target.message.value = \"\"\n    }, [sendMessage]);\n\n    const connectionStatus = {\n        [ReadyState.CONNECTING]: 'Connecting',\n        [ReadyState.OPEN]: 'Open',\n        [ReadyState.CLOSING]: 'Closing',\n        [ReadyState.CLOSED]: 'Closed',\n        [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n    }[readyState];\n\n    return (\n        <Stack direction=\"column\" mt={1}>\n\n            {connectionStatus === \"Open\" ? <> <Flex bg=\"Highlight\" p={5} borderRadius=\"20\">\n                <Button leftIcon={<ArrowBackIcon />} as={Link} to=\"/\" />\n                <Box p=\"2\" ml={[1, 2, 4]}>\n                    <Heading size=\"md\">{id.replace(/_/g, ' ')}</Heading>\n\n                </Box>\n\n                <Spacer />\n                <Stack direction=\"row\" mr={4} display={{ base: \"none\", lg: \"flex\" }}>\n                    <Text>\n                        {roomInfo.total_members && <>{`Members:${roomInfo.total_members} `}</>}\n                    </Text>\n                    <Text pr={4}>\n                        {roomInfo.public && <> Group Type: {roomInfo.public ? \"Public\" : \"private\"}</>}\n                    </Text>\n                    <Tag size=\"lg\" colorScheme={connectionStatus === \"Open\" ? \"green\" : \"red\"} borderRadius=\"full\">\n                        <Avatar\n                            bg={connectionStatus === \"Open\" ? \"green\" : \"red\"}\n                            size=\"xs\"\n                            name=\"o\"\n                            ml={-1}\n                            mr={2}\n                        />\n                        <TagLabel>{connectionStatus}</TagLabel>\n                    </Tag>\n                </Stack>\n\n                {connectionStatus === \"Closed\" &&\n                    toast({\n                        title: `You Don't have access or no room with name ${id.replace(/_/g, ' ')}`,\n                        // description: \"Try \",\n                        status: \"error\",\n                        duration: 9000,\n                        isClosable: true,\n                    })}\n\n                {roomInfo.admin === user.username && <Box>\n                    <Menu>\n                        <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n                            Add User\n                        </MenuButton>\n                        <MenuList>\n                            <AddUser roomId={roomInfo.id} />\n                        </MenuList>\n                    </Menu>\n                </Box>}\n            </Flex>\n                <div>\n\n\n                    <Box overflowY=\"scroll\" height={['70vh', '80vh']} mb=\"20\" >\n                        {messages\n                            .map((message, idx) => <Stack key={idx}>\n                                <SingleChat data={message} id={idx} /></Stack>)}\n                    </Box>\n                </div>\n                <chakra.form onSubmit={handleClickSendMessage} bottom={[0, 0, 0, 4]} position=\"fixed\" alignSelf=\"center\">\n                    <InputGroup size=\"md\" >\n                        <Input\n                            pr=\"4.5rem\"\n                            type=\"text\"\n                            variant=\"filled\"\n                            height=\"20\"\n                            minWidth={['sm', \"md\", 550, 800, 800]}\n                            placeholder=\"Enter Message\"\n                            name=\"message\"\n                        />\n                        <InputRightElement width=\"7rem\" height=\"4.5rem\" >\n                            <Button size=\"lg\" type=\"submit\" my=\"auto\" mx=\"auto\">\n                                send\n                        </Button>\n                        </InputRightElement>\n                    </InputGroup>\n                </chakra.form>\n\n            </> : <></>}\n            {connectionStatus === \"Closed\" && <Text>Try creating or joining different room</Text>}\n\n        </Stack>\n    )\n}\n\nexport default Detail\n"],"sourceRoot":""}