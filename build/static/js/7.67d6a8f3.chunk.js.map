{"version":3,"sources":["../../../src/stack.utils.tsx","../../../src/stack.tsx","components/Auth/Login/LoggedIn.js"],"names":["selector","StackItem","props","className","__css","display","flex","minWidth","Stack","forwardRef","direction","spacing","shouldWrapChildren","isInline","directionProp","styles","options","directionStyles","column","marginTop","marginEnd","marginBottom","marginStart","row","flexDirection","mapResponsive","value","getStackStyles","dividerStyle","dividerStyles","my","mx","borderLeftWidth","borderBottomWidth","getDividerStyles","hasDivider","shouldUseChildren","validChildren","getValidChildren","clones","isLast","index","_child","key","_divider","_className","cx","ref","alignItems","justifyContent","flexWrap","HStack","align","VStack","LoggedIn","dispatch","useDispatch","user","useSelector","state","history","useHistory","px","py","w","h1","mb","fontSize","base","md","fontWeight","lineHeight","color","useColorModeValue","username","p","sm","variant","bg","size","onClick","push","logout"],"mappings":"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","file":"static/js/7.67d6a8f3.chunk.js","sourcesContent":["import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\n/**\n * If we ever run into SSR issues with this, check this post to find a fix for it:\n * @see https://medium.com/@emmenko/patching-lobotomized-owl-selector-for-emotion-ssr-5a582a3c424c\n */\nexport const selector = \"& > *:not(style) ~ *:not(style)\"\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getStackStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const directionStyles = {\n    column: {\n      marginTop: spacing,\n      marginEnd: 0,\n      marginBottom: 0,\n      marginStart: 0,\n    },\n    row: { marginTop: 0, marginEnd: 0, marginBottom: 0, marginStart: spacing },\n    \"column-reverse\": {\n      marginTop: 0,\n      marginEnd: 0,\n      marginBottom: spacing,\n      marginStart: 0,\n    },\n    \"row-reverse\": {\n      marginTop: 0,\n      marginEnd: spacing,\n      marginBottom: 0,\n      marginStart: 0,\n    },\n  }\n\n  return {\n    flexDirection: direction,\n    [selector]: mapResponsive(direction, (value) => directionStyles[value]),\n  }\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(direction, (value) => dividerStyles[value]),\n  }\n}\n","import {\n  chakra,\n  ChakraComponent,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles, getStackStyles, selector } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   */\n  isInline?: boolean\n}\n\nexport interface StackDividerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StackDivider: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__divider\"\n    {...props}\n    __css={{\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\",\n    }}\n  />\n)\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/docs/layout/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const styles = React.useMemo(() => getStackStyles({ direction, spacing }), [\n    direction,\n    spacing,\n  ])\n\n  const dividerStyle = React.useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const validChildren = getValidChildren(children)\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const isLast = index + 1 === validChildren.length\n        const wrappedChild = <StackItem key={index}>{child}</StackItem>\n        const _child = shouldWrapChildren ? wrappedChild : child\n\n        if (!hasDivider) return _child\n\n        const clonedDivider = React.cloneElement(\n          divider as React.ReactElement<any>,\n          { __css: dividerStyle },\n        )\n\n        const _divider = isLast ? null : clonedDivider\n\n        return (\n          <React.Fragment key={index}>\n            {_child}\n            {_divider}\n          </React.Fragment>\n        )\n      })\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={styles.flexDirection}\n      flexWrap={wrap}\n      className={_className}\n      __css={hasDivider ? {} : { [selector]: styles[selector] }}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\"\n}\n\n/**\n * A view that arranges its children in a horizontal line.\n */\nexport const HStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"row\" ref={ref} />\n))\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\"\n}\n\n/**\n * A view that arranges its children in a vertical line.\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\"\n}\n","import React from \"react\";\nimport {\n    chakra,\n    Box,\n    useColorModeValue,\n    Flex,\n    Button,\n    Stack,\n} from \"@chakra-ui/react\";\nimport { logout } from '../../../store/user'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\nconst LoggedIn = () => {\n    const dispatch = useDispatch()\n    const { user } = useSelector(state => state.user)\n    const history = useHistory();\n\n\n    return (\n        <Flex px={4} py={32} mx=\"auto\">\n            <Box mx=\"auto\" w={[300, 500]} justifyContent=\"center\" display=\"flex\" flexDirection=\"column\">\n                <chakra.h1\n                    mb={3}\n                    fontSize={{ base: \"3xl\", md: \"4xl\" }}\n                    fontWeight=\"bold\"\n                    lineHeight=\"shorter\"\n                    color={useColorModeValue(\"gray.900\", \"white\")}\n                >\n                    Hi, {user?.username}!\n        </chakra.h1>\n                <chakra.p mb={5} color=\"gray.500\" fontSize={{ md: \"lg\" }}>\n                    visit homepage to start chatting\n        </chakra.p>\n                <Stack>\n                    <Button\n                        w={{ base: \"full\", sm: \"auto\" }}\n                        variant=\"solid\"\n                        bg=\"blue.400\"\n                        size=\"lg\"\n                        mb={{ base: 2, sm: 0 }}\n                        onClick={() => history.push(`/`)}\n\n                    >\n                        Home Page\n                    </Button>\n                    <Button\n                        w={{ base: \"full\", sm: \"auto\" }}\n                        variant=\"solid\"\n                        bg=\"yellow.400\"\n                        size=\"lg\"\n                        mb={{ base: 2, sm: 0 }}\n                        onClick={() => dispatch(logout())}\n                    >\n                        Logout\n                    </Button>\n                </Stack>\n            </Box>\n        </Flex>\n    );\n};\n\nexport default LoggedIn;"],"sourceRoot":""}